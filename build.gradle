buildscript {
    repositories {
        maven {
            url 'https://maven.aliyun.com/repository/public'
        }
    }

    // spring-boot-gradle-plugin 插件
    // 管理 org.springframework.boot 和 io.spring.dependency-management 版本号
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:2.7.4'
    }
}

// 配置所有模块
allprojects {
    group 'cn.microboat'
    version '1.0-SNAPSHOT'

    // 都使用这个仓库
    repositories {
        maven {
            url 'https://maven.aliyun.com/repository/public'
        }
    }
}

// 从 config.gradle 文件中导入配置
apply from: 'config.gradle'

// 配置所有子模块
subprojects {
    // 都使用以下插件
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    // 依赖引入声明，管理依赖的版本号
    dependencyManagement {
        dependencies {
            for (depJar in rootProject.ext.dependencies) {
                dependency depJar.value
            }
        }
        imports {
            // spring-cloud 依赖
            mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2021.0.4'

            // spring-cloud-alibaba 依赖
            mavenBom 'com.alibaba.cloud:spring-cloud-alibaba-dependencies:2021.1'
        }
    }
}

// 给子模块 Common 的 CommonCore 配置依赖
project(':Common:CommonCore') {
    dependencies {
        // spring cloud openfeign
        api 'org.springframework.cloud:spring-cloud-starter-openfeign'
        // spring cloud loadbalancer
        api 'org.springframework.cloud:spring-cloud-starter-loadbalancer'
        // spring context support
        api 'org.springframework:spring-context-support'
        // spring cloud netflix hystrix
        api 'org.springframework.cloud:spring-cloud-starter-netflix-hystrix'
        // configuration-processor
        api 'org.springframework.boot:spring-boot-configuration-processor'
        // hutool 工具类
        api 'cn.hutool:hutool-all'
        // guava 工具类
        api 'com.google.guava:guava'
        // jjwt jsonwebtoken api impl gson
        api 'io.jsonwebtoken:jjwt-api'
        api 'io.jsonwebtoken:jjwt-impl'
        api 'io.jsonwebtoken:jjwt-gson'
        // gson
        api 'com.google.code.gson:gson'
        // lombok 插件
        api 'org.projectlombok:lombok'
        // slf4j 日志
        api 'org.slf4j:slf4j-api'
        api 'ch.qos.logback:logback-classic'
        // knife4j swagger 升级版
        api 'com.github.xiaoymin:knife4j-micro-spring-boot-starter'
        api 'com.github.xiaoymin:knife4j-spring-boot-starter'
        // fastjson
        api 'com.alibaba.fastjson2:fastjson2'
        // mapstruct 映射工具
        api 'org.mapstruct:mapstruct'
        // mapstruct annotationProcessor
        annotationProcessor 'org.mapstruct:mapstruct-processor'
    }
}

// 给子模块 Common 的 CommonDatasource 配置依赖
project(':Common:CommonDatasource') {
    dependencies {
        // 引入公共模块 CommonCore
        implementation project(':Common:CommonCore')
        // mybatis
        api 'org.mybatis.spring.boot:mybatis-spring-boot-starter'
        // druid
        api 'com.alibaba:druid-spring-boot-starter'
        // mysql
        api 'mysql:mysql-connector-java'
    }
}

// 给子模块 Common 的 CommonRedis 配置依赖
project(':Common:CommonRedis') {
    dependencies {
        // 引入公共模块 CommonCore
        implementation project(':Common:CommonCore')
        // redis
        api 'org.springframework.boot:spring-boot-starter-data-redis'
    }
}

// 给子模块 Common 的 CommonWeb 配置依赖
project(':Common:CommonWeb') {
    dependencies {
        // 引入公共模块 CommonCore
        implementation project(':Common:CommonCore')
        // web
        api 'org.springframework.boot:spring-boot-starter-web'
    }
}

// 给子模块 Common 的 CommonSecurity 配置依赖
project(':Common:CommonSecurity') {
    dependencies {
        // 引入公共模块 CommonCore
        implementation project(':Common:CommonCore')
        // 引入公共模块 CommonRedis
        implementation project(':Common:CommonRedis')
        // 引入公共模块 CommonWeb
        implementation project(':Common:CommonWeb')
    }
}

// 给子模块 Api 配置依赖
project(':Api') {
    // 所有 Api 的子模块都配置
    subprojects {
        dependencies {
        }
    }
}

// 给子模块 Api 的子模块 SystemApi 配置依赖
project(':Api:SystemApi') {
    dependencies {
        // 引入公共模块 CommonCore
        implementation project(':Common:CommonCore')
        annotationProcessor 'org.projectlombok:lombok'
    }
}

// 给子模块 Gateway 配置依赖
project(':Gateway') {
    dependencies {
        // 引入公共模块 CommonCore
        implementation project(':Common:CommonCore')
        // 引入公共模块 CommonRedis，需要在配置文件中配置 redis 的配置
        implementation project(':Common:CommonRedis')
        annotationProcessor 'org.projectlombok:lombok'
        implementation 'com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-config'
        implementation 'com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-discovery'
        implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'
        implementation 'org.springframework.cloud:spring-cloud-starter-gateway'
        implementation 'org.springframework.cloud:spring-cloud-starter-loadbalancer'

        // 验证码
        implementation 'com.github.penggle:kaptcha'
    }
}

// 给子模块 Modules 的子模块配置公共依赖
project(':Modules') {
    // 所有 Modules 的子模块都配置
    subprojects {
        dependencies {
            // 引入公共模块 CommonCore
            implementation project(':Common:CommonCore')
            implementation project(':Api:SystemApi')
            // nacos 服务注册、服务发现
            implementation 'com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-config'
            implementation 'com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-discovery'
            // 支持 bootstrap.yml、bootstrap.properties 作为配置文件
            implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'
            // tomcat web
            implementation 'org.springframework.boot:spring-boot-starter-web'
        }
    }
}

// 给子模块 Modules 的子模块 AuthService 配置依赖
project(':Modules:AuthService') {
    dependencies {
        // 引入公共模块 CommonSecurity，要在 yml 中添加 redis 的配置
        implementation project(':Common:CommonSecurity')
        // 引入公共模块 CommonWeb
        implementation project(':Common:CommonWeb')
    }
}

// 给子模块 Modules 的子模块 FileService 配置依赖
project(':Modules:FileService') {
    dependencies {
        // 引入公共模块 CommonCore
        implementation project(':Common:CommonCore')
        annotationProcessor 'org.projectlombok:lombok'
    }
}

// 给子模块 Modules 的子模块 JobService 配置依赖
project(':Modules:JobService') {
    dependencies {
        // 引入公共模块 CommonCore
        implementation project(':Common:CommonCore')
    }
}

// 给子模块 Modules 的子模块 MessageService 配置依赖
project(':Modules:MessageService') {
    dependencies {
        // 引入公共模块 CommonCore
        implementation project(':Common:CommonCore')
        implementation 'org.springframework.kafka:spring-kafka'
        implementation 'org.apache.kafka:kafka-streams'
    }
}

// 给子模块 Modules 的子模块 SystemService 配置依赖
project(':Modules:SystemService') {
    // 解决 mapper 的 xml 文件无法打包的问题
    sourceSets.main.resources.srcDirs = ["src/main/java", "src/main/resources"]
    dependencies {
        // 引入公共模块 CommonDatasource，要在 yml 中添加 mysql 的配置
        implementation project(':Common:CommonDatasource')
        // 引入公共模块 CommonRedis，要在 yml 中添加 redis 的配置
        implementation project(':Common:CommonRedis')
        // 引入公共模块 CommonWeb
        implementation project(':Common:CommonWeb')
    }
}

// 给子模块 Modules 的子模块 TaskService 配置依赖
project(':Modules:TaskService') {
    // 解决 mapper 的 xml 文件无法打包的问题
    sourceSets.main.resources.srcDirs = ["src/main/java", "src/main/resources"]
    dependencies {
        // 引入公共模块 CommonDatasource，要在 yml 中添加 mysql 的配置
        implementation project(':Common:CommonDatasource')
    }
}

// 给子模块 Modules 的子模块 WebSocketService 配置依赖
project(':Modules:WebSocketService') {
    dependencies {
        // 引入公共模块 CommonCore
        implementation project(':Common:CommonCore')
        annotationProcessor 'org.projectlombok:lombok'
        // websocket starter
        implementation 'org.springframework.boot:spring-boot-starter-websocket'
    }
}
